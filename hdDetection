import numpy as np #used to make arrays
import pandas as pd #useful for creating data frames
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score

#loading the csv data to our Pandas dataframe
heart_data = pd.read_csv('/content/data.csv')

#print first five rows
heart_data.head()

#print last five rows
heart_data.tail()

#number of rows and columns
heart_data.shape

#get info about data
heart_data.info()

#checking for missing values
heart_data.isnull().sum

#statistical measures about the data
heart_data.describe()

#checking the distribution of the target variable
# 1 --> defective heart
# 0 --> healthy heart
heart_data['target'].value_counts()

X = heart_data.drop(columns='target', axis=1)
Y = heart_data['target']

print(X)
print(Y)

X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.2, stratify=Y, random_state=2)

print(X.shape, X_train.shape, X_test.shape) #original data, train data, test data

model = LogisticRegression()

#training the logistic regression model with training data
model.fit(X_train, Y_train)

#accuracy on training data
X_train_prediction = model.predict(X_train)
training_data_accuracy = accuracy_score(X_train_prediction, Y_train)

print('Accuracy on training data: ', training_data_accuracy)

#accuracy on test data
X_test_prediction = model.predict(X_test)
testing_data_accuracy = accuracy_score(X_test_prediction, Y_test)

print('Accuracy on testing data: ', testing_data_accuracy)

input_data = (41,0,1,130,204,0,0,172,0,1.4,2,0,2)
# change the input data to a numpy array. currently tuple
input_data_as_numpy_array = np.asarray(input_data)

#reshape numpy array since we are predicting for only one instance
input_data_reshaped = input_data_as_numpy_array.reshape(1, -1)

prediction = model.predict(input_data_reshaped)
print(prediction) #prints 1 or 0

if (prediction[0]==0):
  print('The person does not have heart disease')
else:
  print('The person has heart disease')



